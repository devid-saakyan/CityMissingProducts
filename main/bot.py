import os
import django
import telebot
import requests
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup
from main.models import TelegramUser, ProductsReport
from django.db.models import Q

#BOT_TOKEN = '7933060895:AAFBfZjAYwkiNKeF138INpEI3_wCLEOziQ4' #test
BOT_TOKEN = "7946030117:AAG_r4--uVvaLTHNKLlrIuIonaTbMr_W2Nk"
PRODUCT_REPORT_API_URL = "http://127.0.0.1:8014/api/UpdateProductReport"
REVIEW_CATEGORY_API_URL = "http://127.0.0.1:8014/api/UpdateReviewCategory"

bot = telebot.TeleBot(BOT_TOKEN)

user_states = {}


def get_active_chat_ids(branch):
    if branch:
        print(branch)
        return list(TelegramUser.objects.filter(Q(branch__name=branch) | Q(status__name='Admin')).values_list("user_id", flat=True))


def send_report_to_telegram(sap_code_name, sap_code, price, report_id, image_url, reasons, branch, main_reason,
                            user_basket_count, stock_count, is_kilogram):
    main_reason_dict = {'Out of stock': '’ä’°’∞’•’Ω’ø’∏÷Ç’¥ ’π’Ø’°', 'Product Quality': '‘±’∫÷Ä’°’∂÷Ñ’´ ’∏÷Ä’°’Ø', 'Expire Date': '‘∫’°’¥’Ø’•’ø'}
    keyboard = InlineKeyboardMarkup()
    for reason in reasons:
        if reason['name'] == '’°’µ’¨':
            callback_data = f"report:{report_id}:{reason['id']}:other"
        else:
            callback_data = f"report:{report_id}:{reason['id']}:-"
        keyboard.add(InlineKeyboardButton(text=reason['name'], callback_data=callback_data))
    kilo_or_count = '’Ø’£' if is_kilogram is True else '’∞’°’ø'
    text = (
        f"üì¢ <b>’Ü’∏÷Ä ’æ’•÷Ä’°’§’°÷Ä’±: {main_reason_dict.get(str(main_reason))}</b>\n"
        f"üè¨ <b>’Ñ’°’Ω’∂’°’≥’µ’∏÷Ç’≤:</b> {branch}\n"
        f"üì¶ <b>‘±’∫÷Ä’°’∂÷Ñ:</b> {sap_code_name}\n"
        f"üìÇ <b>Sap Code:</b> {sap_code}\n"
        f"üì¶ <b>’ä’°’ø’æ’´÷Ä’°’Æ ÷Ñ’°’∂’°’Ø:</b> {user_basket_count} {kilo_or_count}\n"
        f"üì¶ <b>‘±’º’Ø’° ÷Ñ’°’∂’°’Ø:</b> {stock_count} {kilo_or_count}\n"
        f"üí∞ <b>‘≥’´’∂:</b> {price} ÷è\n"
        f"üñº <b>’Ü’Ø’°÷Ä:</b> <a href='{image_url}'>’Ü’°’µ’•’¨</a>"
    )

    chat_ids = get_active_chat_ids(branch)
    for chat_id in chat_ids:
        try:
            bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")
        except Exception as e:
            print(e)
            print(f'i cant send a message to user_id {chat_id}')


def send_review_to_telegram(order_id, rate, comment, review_id, categories, branch):
    keyboard = InlineKeyboardMarkup()
    for category in categories:
        callback_data = f"review:{review_id}:{category['id']}"
        keyboard.add(InlineKeyboardButton(text=category['name'], callback_data=callback_data))

    text = (
        f"üì¢ <b>’Ü’∏÷Ä ’£’∂’°’∞’°’ø’°’Ø’°’∂</b>\n"
        f"üì¶ <b>’ä’°’ø’æ’•÷Ä’´ ‚Ññ:</b> {order_id}\n"
        f"‚≠ê <b>‘≥’∂’°’∞’°’ø’°’Ø’°’∂:</b> {rate}\n"
        f"üí¨ <b>’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂:</b> {comment}"
    )

    chat_ids = get_active_chat_ids(branch)
    for chat_id in chat_ids:
        try:
            bot.send_message(chat_id=chat_id, text=text, reply_markup=keyboard, parse_mode="HTML")
        except:
            print(f'i cant send a message to user_id {chat_id}')


@bot.callback_query_handler(func=lambda call: call.data.startswith("report:"))
def handle_report_reason(call):
    try:
        print(call.data)
        _, report_id, reason_id, reason_name = call.data.split(":")
        if reason_name == 'other':
            bot.answer_callback_query(call.id)
            response = requests.post(
                PRODUCT_REPORT_API_URL,
                json={"report_id": int(report_id), "reason_id": int(reason_id)}
            )
            user_states[call.message.chat.id] = report_id
            print(f"User state saved: {user_states}")
            bot.send_message(
                chat_id=call.message.chat.id,
                text="‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’∑’•’¨ ’¥’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’®:"
            )
        else:
            response = requests.post(
                PRODUCT_REPORT_API_URL,
                json={"report_id": int(report_id), "reason_id": int(reason_id)}
            )
            if response.status_code == 200:
                report = ProductsReport.objects.get(id=report_id)
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text=f"’é’•÷Ä’°’§’°÷Ä’±’´ ’∫’°’ø’≥’°’º’® ’©’°÷Ä’¥’°÷Å’æ’•÷Å:\n‘∏’∂’ø÷Ä’æ’°’Æ ’∫’°’ø’≥’°’º’®: {report.manager_reason}"
                )
                bot.answer_callback_query(call.id, "’é’•÷Ä’°’§’°÷Ä’±’´ ’∫’°’ø’≥’°’º’® ’©’°÷Ä’¥’°÷Å’æ’•÷Å")
            else:
                bot.answer_callback_query(call.id, "’ä’°’ø’≥’°’º’´ ’©’°÷Ä’¥’°÷Å’∏÷Ç’¥’® ’±’°’≠’∏’≤’æ’•÷Å÷â", show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f"’ç’≠’°’¨ ’ß ’ø’•’≤’´ ’∏÷Ç’∂’•÷Å’•’¨: {e}", show_alert=True)


@bot.message_handler(func=lambda message: message.chat.id in user_states)
def handle_comment(message):
    try:
        report_id = user_states.pop(message.chat.id, None)
        if not report_id:
            bot.send_message(chat_id=message.chat.id, text="–°–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        print(f"handle_comment triggered with message: {message.text} for report_id: {report_id}")
        comment = message.text
        report = ProductsReport.objects.get(id=report_id)
        report.comment = comment
        report.save()

        bot.send_message(
            chat_id=message.chat.id,
            text=f"’Ñ’•’Ø’∂’°’¢’°’∂’∏÷Ç’©’µ’∏÷Ç’∂’® ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’°’æ’•’¨’°÷Å’æ’°’Æ ’ß:\n{comment}"
        )
    except Exception as e:
        print(f"Error in handle_comment: {e}")
        bot.send_message(chat_id=message.chat.id, text=f"–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


@bot.message_handler(func=lambda message: True)
def debug_message(message):
    print(f"Message handler triggered: {message.text} from chat {message.chat.id}")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith("review:"))
def handle_review_category(call):
    try:
        _, review_id, category_id = call.data.split(":")
        response = requests.post(
            REVIEW_CATEGORY_API_URL,
            json={"review_id": int(review_id), "category_id": int(category_id)}
        )
        print(response.text)
        if response.status_code == 200:
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞ {review_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.\n–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category_id}"
            )
            bot.answer_callback_query(call.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.", show_alert=True)
    except Exception as e:
        bot.answer_callback_query(call.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)



# import telebot
#
# BOT_TOKEN = '7933060895:AAFBfZjAYwkiNKeF138INpEI3_wCLEOziQ4'
# bot = telebot.TeleBot(BOT_TOKEN)
#
# @bot.message_handler(func=lambda message: True)
# def debug_all_messages(message):
#     print(f"Message received: {message.text} from chat {message.chat.id}")
#     bot.send_message(message.chat.id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ!")
#
# bot.polling(none_stop=True, interval=0)